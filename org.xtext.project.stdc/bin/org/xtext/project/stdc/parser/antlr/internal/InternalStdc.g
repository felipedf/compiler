/*
 * generated by Xtext 2.9.2
 */
grammar InternalStdc;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.project.stdc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.project.stdc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.project.stdc.services.StdcGrammarAccess;

}

@parser::members {

 	private StdcGrammarAccess grammarAccess;

    public InternalStdcParser(TokenStream input, StdcGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected StdcGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsTranslationUnitParserRuleCall_0());
			}
			lv_greetings_0_0=ruleTranslationUnit
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.project.stdc.Stdc.TranslationUnit");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTranslationUnit
entryRuleTranslationUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTranslationUnitRule()); }
	iv_ruleTranslationUnit=ruleTranslationUnit
	{ $current=$iv_ruleTranslationUnit.current; }
	EOF;

// Rule TranslationUnit
ruleTranslationUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTranslationUnitAccess().getExDeclarationExternalDeclarationParserRuleCall_0());
			}
			lv_exDeclaration_0_0=ruleExternalDeclaration
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTranslationUnitRule());
				}
				add(
					$current,
					"exDeclaration",
					lv_exDeclaration_0_0,
					"org.xtext.project.stdc.Stdc.ExternalDeclaration");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleExternalDeclaration
entryRuleExternalDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalDeclarationRule()); }
	iv_ruleExternalDeclaration=ruleExternalDeclaration
	{ $current=$iv_ruleExternalDeclaration.current; }
	EOF;

// Rule ExternalDeclaration
ruleExternalDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleFunctionDefinition)=>
			{
				newCompositeNode(grammarAccess.getExternalDeclarationAccess().getFunctionDefinitionParserRuleCall_0());
			}
			this_FunctionDefinition_0=ruleFunctionDefinition
			{
				$current = $this_FunctionDefinition_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExternalDeclarationAccess().getDeclarationParserRuleCall_1());
		}
		this_Declaration_1=ruleDeclaration
		{
			$current = $this_Declaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	iv_ruleFunctionDefinition=ruleFunctionDefinition
	{ $current=$iv_ruleFunctionDefinition.current; }
	EOF;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getDeclarationSpecDeclarationSpecifierParserRuleCall_0_0());
				}
				lv_declarationSpec_0_0=ruleDeclarationSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					add(
						$current,
						"declarationSpec",
						lv_declarationSpec_0_0,
						"org.xtext.project.stdc.Stdc.DeclarationSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getDeclaDeclaratorParserRuleCall_1_0());
				}
				lv_decla_1_0=ruleDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					set(
						$current,
						"decla",
						lv_decla_1_0,
						"org.xtext.project.stdc.Stdc.Declarator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getDeclaListDeclarationParserRuleCall_2_0());
				}
				lv_declaList_2_0=ruleDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					add(
						$current,
						"declaList",
						lv_declaList_2_0,
						"org.xtext.project.stdc.Stdc.Declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBodyCompoundStatementParserRuleCall_3_0());
				}
				lv_body_3_0=ruleCompoundStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.xtext.project.stdc.Stdc.CompoundStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	iv_ruleConstantExpression=ruleConstantExpression
	{ $current=$iv_ruleConstantExpression.current; }
	EOF;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstantExpressionAccess().getConditionalExpressionParserRuleCall());
	}
	this_ConditionalExpression_0=ruleConditionalExpression
	{
		$current = $this_ConditionalExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpressionC
entryRuleExpressionC returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionCRule()); }
	iv_ruleExpressionC=ruleExpressionC
	{ $current=$iv_ruleExpressionC.current; }
	EOF;

// Rule ExpressionC
ruleExpressionC returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionCAccess().getAssignmentExpressionParserRuleCall_0());
		}
		this_AssignmentExpression_0=ruleAssignmentExpression
		{
			$current = $this_AssignmentExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getExpressionCAccess().getExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getExpressionCAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionCAccess().getRightAssignmentExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionCRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	iv_ruleAssignmentExpression=ruleAssignmentExpression
	{ $current=$iv_ruleAssignmentExpression.current; }
	EOF;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_0());
		}
		this_ConditionalExpression_0=ruleConditionalExpression
		{
			$current = $this_ConditionalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignParserRuleCall_1_1());
			}
			ruleOpAssign
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightConditionalExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleConditionalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.ConditionalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOpAssign
entryRuleOpAssign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpAssignRule()); }
	iv_ruleOpAssign=ruleOpAssign
	{ $current=$iv_ruleOpAssign.current.getText(); }
	EOF;

// Rule OpAssign
ruleOpAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='+='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getPlusSignEqualsSignKeyword_1());
		}
		    |
		kw='-='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getHyphenMinusEqualsSignKeyword_2());
		}
		    |
		kw='*='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getAsteriskEqualsSignKeyword_3());
		}
		    |
		kw='/='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getSolidusEqualsSignKeyword_4());
		}
		    |
		kw='%='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getPercentSignEqualsSignKeyword_5());
		}
		    |
		kw='&='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getAmpersandEqualsSignKeyword_6());
		}
		    |
		kw='|='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAssignAccess().getVerticalLineEqualsSignKeyword_7());
		}
		    |
		(
			kw='<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpAssignAccess().getLessThanSignKeyword_8_0());
			}
			kw='<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpAssignAccess().getLessThanSignKeyword_8_1());
			}
			kw='='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpAssignAccess().getEqualsSignKeyword_8_2());
			}
		)
		    |
		(
			kw='>'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpAssignAccess().getGreaterThanSignKeyword_9_0());
			}
			kw='>='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpAssignAccess().getGreaterThanSignEqualsSignKeyword_9_1());
			}
		)
	)
;

// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	iv_ruleConditionalExpression=ruleConditionalExpression
	{ $current=$iv_ruleConditionalExpression.current; }
	EOF;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0());
		}
		this_LogicalOrExpression_0=ruleLogicalOrExpression
		{
			$current = $this_LogicalOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConditionalExpressionAccess().getConditionalExpressionFirstAction_1_0(),
						$current);
				}
			)
			(
				((
					'?'
					(
						(
							ruleExpressionC
						)
					)
				)
				)=>
				(
					otherlv_2='?'
					{
						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getConditionalExpressionAccess().getSecondExpressionCParserRuleCall_1_1_0_1_0());
							}
							lv_second_3_0=ruleExpressionC
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
								}
								set(
									$current,
									"second",
									lv_second_3_0,
									"org.xtext.project.stdc.Stdc.ExpressionC");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getThirdConditionalExpressionParserRuleCall_1_3_0());
					}
					lv_third_5_0=ruleConditionalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
						}
						set(
							$current,
							"third",
							lv_third_5_0,
							"org.xtext.project.stdc.Stdc.ConditionalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	iv_ruleLogicalOrExpression=ruleLogicalOrExpression
	{ $current=$iv_ruleLogicalOrExpression.current; }
	EOF;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0());
		}
		this_LogicalAndExpression_0=ruleLogicalAndExpression
		{
			$current = $this_LogicalAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					ruleOpOr
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalOrExpressionAccess().getLogicOrLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOpOrParserRuleCall_1_0_0_1());
					}
					ruleOpOr
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleLogicalAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.LogicalAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpOrRule()); }
	iv_ruleOpOr=ruleOpOr
	{ $current=$iv_ruleOpOr.current.getText(); }
	EOF;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='||'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword());
	}
;

// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	iv_ruleLogicalAndExpression=ruleLogicalAndExpression
	{ $current=$iv_ruleLogicalAndExpression.current; }
	EOF;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getInclusiveOrExpressionParserRuleCall_0());
		}
		this_InclusiveOrExpression_0=ruleInclusiveOrExpression
		{
			$current = $this_InclusiveOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					ruleOpAnd
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalAndExpressionAccess().getLogicalExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOpAndParserRuleCall_1_0_0_1());
					}
					ruleOpAnd
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightInclusiveOrExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleInclusiveOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.InclusiveOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpAndRule()); }
	iv_ruleOpAnd=ruleOpAnd
	{ $current=$iv_ruleOpAnd.current.getText(); }
	EOF;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='&&'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword());
	}
;

// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInclusiveOrExpressionRule()); }
	iv_ruleInclusiveOrExpression=ruleInclusiveOrExpression
	{ $current=$iv_ruleInclusiveOrExpression.current; }
	EOF;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExclusiveOrExpressionParserRuleCall_0());
		}
		this_ExclusiveOrExpression_0=ruleExclusiveOrExpression
		{
			$current = $this_ExclusiveOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'|'
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='|'
					{
						newLeafNode(otherlv_2, grammarAccess.getInclusiveOrExpressionAccess().getVerticalLineKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getRightExclusiveOrExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleExclusiveOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInclusiveOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.ExclusiveOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExclusiveOrExpressionRule()); }
	iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression
	{ $current=$iv_ruleExclusiveOrExpression.current; }
	EOF;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'^'
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='^'
					{
						newLeafNode(otherlv_2, grammarAccess.getExclusiveOrExpressionAccess().getCircumflexAccentKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0());
		}
		this_EqualityExpression_0=ruleEqualityExpression
		{
			$current = $this_EqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'&'
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAndExpressionAccess().getAndExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='&'
					{
						newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.EqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	iv_ruleEqualityExpression=ruleEqualityExpression
	{ $current=$iv_ruleEqualityExpression.current; }
	EOF;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
		}
		this_RelationalExpression_0=ruleRelationalExpression
		{
			$current = $this_RelationalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					ruleOpEqual
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualityExpressionAccess().getEqualExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualParserRuleCall_1_0_0_1());
					}
					ruleOpEqual
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleRelationalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.RelationalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpEqual
entryRuleOpEqual returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpEqualRule()); }
	iv_ruleOpEqual=ruleOpEqual
	{ $current=$iv_ruleOpEqual.current.getText(); }
	EOF;

// Rule OpEqual
ruleOpEqual returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpEqualAccess().getEqualsSignEqualsSignKeyword_0());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpEqualAccess().getExclamationMarkEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
		}
		this_ShiftExpression_0=ruleShiftExpression
		{
			$current = $this_ShiftExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					ruleOpRel
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getRelationalExpressionAccess().getRelExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelParserRuleCall_1_0_0_1());
					}
					ruleOpRel
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleShiftExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.ShiftExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpRel
entryRuleOpRel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpRelRule()); }
	iv_ruleOpRel=ruleOpRel
	{ $current=$iv_ruleOpRel.current.getText(); }
	EOF;

// Rule OpRel
ruleOpRel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpRelAccess().getLessThanSignEqualsSignKeyword_0());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpRelAccess().getGreaterThanSignEqualsSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpRelAccess().getLessThanSignKeyword_2());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpRelAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	iv_ruleShiftExpression=ruleShiftExpression
	{ $current=$iv_ruleShiftExpression.current; }
	EOF;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
		}
		this_AdditiveExpression_0=ruleAdditiveExpression
		{
			$current = $this_AdditiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					ruleOpShift
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getShiftExpressionAccess().getShiftExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftParserRuleCall_1_0_0_1());
					}
					ruleOpShift
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.AdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpShift
entryRuleOpShift returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpShiftRule()); }
	iv_ruleOpShift=ruleOpShift
	{ $current=$iv_ruleOpShift.current.getText(); }
	EOF;

// Rule OpShift
ruleOpShift returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpShiftAccess().getLessThanSignLessThanSignKeyword_0());
		}
		    |
		kw='>>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpShiftAccess().getGreaterThanSignGreaterThanSignKeyword_1());
		}
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
		}
		this_MultiplicativeExpression_0=ruleMultiplicativeExpression
		{
			$current = $this_MultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					ruleOpAdd
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditiveExpressionAccess().getAddExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAddParserRuleCall_1_0_0_1());
					}
					ruleOpAdd
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.MultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpAddRule()); }
	iv_ruleOpAdd=ruleOpAdd
	{ $current=$iv_ruleOpAdd.current.getText(); }
	EOF;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					ruleOpMult
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicativeExpressionAccess().getMultExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultParserRuleCall_1_0_0_1());
					}
					ruleOpMult
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.UnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpMult
entryRuleOpMult returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpMultRule()); }
	iv_ruleOpMult=ruleOpMult
	{ $current=$iv_ruleOpMult.current.getText(); }
	EOF;

// Rule OpMult
ruleOpMult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpMultAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpMultAccess().getSolidusKeyword_1());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpMultAccess().getPercentSignKeyword_2());
		}
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPostExpPostfixExpressionParserRuleCall_0_0());
				}
				lv_postExp_0_0=rulePostfixExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"postExp",
						lv_postExp_0_0,
						"org.xtext.project.stdc.Stdc.PostfixExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCCastRuleParserRuleCall_1_0_0_0());
						}
						lv_c_1_0=ruleCastRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
							}
							set(
								$current,
								"c",
								lv_c_1_0,
								"org.xtext.project.stdc.Stdc.CastRule");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				otherlv_2='sizeof'
				{
					newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionAccess().getSizeofKeyword_1_0_1());
				}
				    |
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryParserRuleCall_1_0_2());
				}
				ruleOpUnary
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpIncParserRuleCall_1_0_3());
				}
				ruleOpInc
				{
					afterParserOrEnumRuleCall();
				}
				    |
				otherlv_5='_Alignof'
				{
					newLeafNode(otherlv_5, grammarAccess.getUnaryExpressionAccess().get_AlignofKeyword_1_0_4());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnExpUnaryExpressionParserRuleCall_1_1_0());
					}
					lv_unExp_6_0=ruleUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"unExp",
							lv_unExp_6_0,
							"org.xtext.project.stdc.Stdc.UnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCastRule
entryRuleCastRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCastRuleRule()); }
	iv_ruleCastRule=ruleCastRule
	{ $current=$iv_ruleCastRule.current; }
	EOF;

// Rule CastRule
ruleCastRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCastRuleAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCastRuleAccess().getTypeTypesParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCastRuleRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.project.stdc.Stdc.Types");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getCastRuleAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleOpInc
entryRuleOpInc returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpIncRule()); }
	iv_ruleOpInc=ruleOpInc
	{ $current=$iv_ruleOpInc.current.getText(); }
	EOF;

// Rule OpInc
ruleOpInc returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='++'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpIncAccess().getPlusSignPlusSignKeyword_0());
		}
		    |
		kw='--'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpIncAccess().getHyphenMinusHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); }
	iv_ruleOpUnary=ruleOpUnary
	{ $current=$iv_ruleOpUnary.current.getText(); }
	EOF;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getAmpersandKeyword_0());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getAsteriskKeyword_1());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_3());
		}
		    |
		kw='~'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getTildeKeyword_4());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_5());
		}
	)
;

// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	iv_rulePostfixExpression=rulePostfixExpression
	{ $current=$iv_rulePostfixExpression.current; }
	EOF;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPostfixExpressionAccess().getPostfixExpressionAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPrimaryExpPrimaryExpressionParserRuleCall_1_0_0());
					}
					lv_primaryExp_1_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
						}
						set(
							$current,
							"primaryExp",
							lv_primaryExp_1_0,
							"org.xtext.project.stdc.Stdc.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPostTypePostfixTypeParserRuleCall_1_1_0());
					}
					lv_postType_2_0=rulePostfixType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
						}
						set(
							$current,
							"postType",
							lv_postType_2_0,
							"org.xtext.project.stdc.Stdc.PostfixType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPostfix2PostfixExpression2ParserRuleCall_2_0());
				}
				lv_postfix2_3_0=rulePostfixExpression2
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
					}
					add(
						$current,
						"postfix2",
						lv_postfix2_3_0,
						"org.xtext.project.stdc.Stdc.PostfixExpression2");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePostfixExpression2
entryRulePostfixExpression2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixExpression2Rule()); }
	iv_rulePostfixExpression2=rulePostfixExpression2
	{ $current=$iv_rulePostfixExpression2.current; }
	EOF;

// Rule PostfixExpression2
rulePostfixExpression2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPostfixExpression2Access().getArrayCallAction_0_0(),
						$current);
				}
			)
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getPostfixExpression2Access().getLeftSquareBracketKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpression2Access().getExppostExpressionCParserRuleCall_0_2_0());
					}
					lv_exppost_2_0=ruleExpressionC
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpression2Rule());
						}
						set(
							$current,
							"exppost",
							lv_exppost_2_0,
							"org.xtext.project.stdc.Stdc.ExpressionC");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getPostfixExpression2Access().getRightSquareBracketKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPostfixExpression2Access().getFunctionCallAction_1_0(),
						$current);
				}
			)
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getPostfixExpression2Access().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpression2Access().getArgumentExpListArgumentExpressionListParserRuleCall_1_2_0());
					}
					lv_argumentExpList_6_0=ruleArgumentExpressionList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpression2Rule());
						}
						set(
							$current,
							"argumentExpList",
							lv_argumentExpList_6_0,
							"org.xtext.project.stdc.Stdc.ArgumentExpressionList");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getPostfixExpression2Access().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPostfixExpression2Access().getDotIDAction_2_0(),
						$current);
				}
			)
			otherlv_9='.'
			{
				newLeafNode(otherlv_9, grammarAccess.getPostfixExpression2Access().getFullStopKeyword_2_1());
			}
			(
				(
					lv_name_10_0=RULE_ID
					{
						newLeafNode(lv_name_10_0, grammarAccess.getPostfixExpression2Access().getNameIDTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPostfixExpression2Rule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_10_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPostfixExpression2Access().getPointerCallAction_3_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getPostfixExpression2Access().getOpPtrParserRuleCall_3_1());
			}
			ruleOpPtr
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					lv_name_13_0=RULE_ID
					{
						newLeafNode(lv_name_13_0, grammarAccess.getPostfixExpression2Access().getNameIDTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPostfixExpression2Rule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_13_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPostfixExpression2Access().getIncDecAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpression2Access().getOpOpIncParserRuleCall_4_1_0());
					}
					lv_op_15_0=ruleOpInc
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpression2Rule());
						}
						set(
							$current,
							"op",
							lv_op_15_0,
							"org.xtext.project.stdc.Stdc.OpInc");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleOpPtr
entryRuleOpPtr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpPtrRule()); }
	iv_ruleOpPtr=ruleOpPtr
	{ $current=$iv_ruleOpPtr.current.getText(); }
	EOF;

// Rule OpPtr
ruleOpPtr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='->'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOpPtrAccess().getHyphenMinusGreaterThanSignKeyword());
	}
;

// Entry rule entryRulePostfixType
entryRulePostfixType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixTypeRule()); }
	iv_rulePostfixType=rulePostfixType
	{ $current=$iv_rulePostfixType.current; }
	EOF;

// Rule PostfixType
rulePostfixType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostfixTypeAccess().getCastRuleParserRuleCall_0());
		}
		this_CastRule_0=ruleCastRule
		{
			$current = $this_CastRule_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPostfixTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPostfixTypeAccess().getInitInitializerListParserRuleCall_2_0());
				}
				lv_init_2_0=ruleInitializerList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostfixTypeRule());
					}
					set(
						$current,
						"init",
						lv_init_2_0,
						"org.xtext.project.stdc.Stdc.InitializerList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getPostfixTypeAccess().getCommaKeyword_3());
			}
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPostfixTypeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getCharConstAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_ch_1_0=RULE_CHAR
					{
						newLeafNode(lv_ch_1_0, grammarAccess.getPrimaryExpressionAccess().getChCHARTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"ch",
							lv_ch_1_0,
							"org.xtext.project.stdc.Stdc.CHAR");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getStrConstAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_str_3_0=RULE_STRINGC
					{
						newLeafNode(lv_str_3_0, grammarAccess.getPrimaryExpressionAccess().getStrSTRINGCTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_3_0,
							"org.xtext.project.stdc.Stdc.STRINGC");
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstantParserRuleCall_2());
		}
		this_Constant_4=ruleConstant
		{
			$current = $this_Constant_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getIdentifierAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_name_6_0=RULE_ID
					{
						newLeafNode(lv_name_6_0, grammarAccess.getPrimaryExpressionAccess().getNameIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_6_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionCParserRuleCall_4_1());
			}
			this_ExpressionC_8=ruleExpressionC
			{
				$current = $this_ExpressionC_8.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getGenericSelectionParserRuleCall_5());
		}
		this_GenericSelection_10=ruleGenericSelection
		{
			$current = $this_GenericSelection_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArgumentExpressionList
entryRuleArgumentExpressionList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentExpressionListRule()); }
	iv_ruleArgumentExpressionList=ruleArgumentExpressionList
	{ $current=$iv_ruleArgumentExpressionList.current; }
	EOF;

// Rule ArgumentExpressionList
ruleArgumentExpressionList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArgumentExpressionListAccess().getAssignmentExpressionParserRuleCall_0());
		}
		this_AssignmentExpression_0=ruleAssignmentExpression
		{
			$current = $this_AssignmentExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getArgumentExpressionListAccess().getArgumentExpLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getArgumentExpressionListAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArgumentExpressionListAccess().getRightAssignmentExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgumentExpressionListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantAccess().getIntConstAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_intC_1_0=RULE_I_CONSTANT
					{
						newLeafNode(lv_intC_1_0, grammarAccess.getConstantAccess().getIntCI_CONSTANTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"intC",
							lv_intC_1_0,
							"org.xtext.project.stdc.Stdc.I_CONSTANT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantAccess().getFloatConstAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_floatC_3_0=RULE_F_CONSTANT
					{
						newLeafNode(lv_floatC_3_0, grammarAccess.getConstantAccess().getFloatCF_CONSTANTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"floatC",
							lv_floatC_3_0,
							"org.xtext.project.stdc.Stdc.F_CONSTANT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEnumerationConstant
entryRuleEnumerationConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationConstantRule()); }
	iv_ruleEnumerationConstant=ruleEnumerationConstant
	{ $current=$iv_ruleEnumerationConstant.current; }
	EOF;

// Rule EnumerationConstant
ruleEnumerationConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv__ID_0_0=RULE_ID
			{
				newLeafNode(lv__ID_0_0, grammarAccess.getEnumerationConstantAccess().get_IDIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEnumerationConstantRule());
				}
				setWithLastConsumed(
					$current,
					"_ID",
					lv__ID_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleGenericSelection
entryRuleGenericSelection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenericSelectionRule()); }
	iv_ruleGenericSelection=ruleGenericSelection
	{ $current=$iv_ruleGenericSelection.current; }
	EOF;

// Rule GenericSelection
ruleGenericSelection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='_Generic'
		{
			newLeafNode(otherlv_0, grammarAccess.getGenericSelectionAccess().get_GenericKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getGenericSelectionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGenericSelectionAccess().getExpAssignmentExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleAssignmentExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenericSelectionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"org.xtext.project.stdc.Stdc.AssignmentExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getGenericSelectionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGenericSelectionAccess().getGenericAssocListGenericAssocListParserRuleCall_4_0());
				}
				lv_genericAssocList_4_0=ruleGenericAssocList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenericSelectionRule());
					}
					set(
						$current,
						"genericAssocList",
						lv_genericAssocList_4_0,
						"org.xtext.project.stdc.Stdc.GenericAssocList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getGenericSelectionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleGenericAssocList
entryRuleGenericAssocList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenericAssocListRule()); }
	iv_ruleGenericAssocList=ruleGenericAssocList
	{ $current=$iv_ruleGenericAssocList.current; }
	EOF;

// Rule GenericAssocList
ruleGenericAssocList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGenericAssocListAccess().getGenericAssociationParserRuleCall_0());
		}
		this_GenericAssociation_0=ruleGenericAssociation
		{
			$current = $this_GenericAssociation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getGenericAssocListAccess().getGenericAssocLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getGenericAssocListAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getGenericAssocListAccess().getRightGenericAssociationParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleGenericAssociation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGenericAssocListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.GenericAssociation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleGenericAssociation
entryRuleGenericAssociation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenericAssociationRule()); }
	iv_ruleGenericAssociation=ruleGenericAssociation
	{ $current=$iv_ruleGenericAssociation.current; }
	EOF;

// Rule GenericAssociation
ruleGenericAssociation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGenericAssociationAccess().getTypeTypeNameParserRuleCall_0_0_0());
					}
					lv_type_0_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGenericAssociationRule());
						}
						set(
							$current,
							"type",
							lv_type_0_0,
							"org.xtext.project.stdc.Stdc.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getGenericAssociationAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGenericAssociationAccess().getAssExpAssignmentExpressionParserRuleCall_0_2_0());
					}
					lv_assExp_2_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGenericAssociationRule());
						}
						set(
							$current,
							"assExp",
							lv_assExp_2_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='default'
			{
				newLeafNode(otherlv_3, grammarAccess.getGenericAssociationAccess().getDefaultKeyword_1_0());
			}
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getGenericAssociationAccess().getColonKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGenericAssociationAccess().getExpAssignmentExpressionParserRuleCall_1_2_0());
					}
					lv_exp_5_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGenericAssociationRule());
						}
						set(
							$current,
							"exp",
							lv_exp_5_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDeclarationAccess().getDeclarationInitDeclaratorListAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationAccess().getDeclarationSpecDeclarationSpecifierParserRuleCall_0_1_0());
					}
					lv_declarationSpec_1_0=ruleDeclarationSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationRule());
						}
						add(
							$current,
							"declarationSpec",
							lv_declarationSpec_1_0,
							"org.xtext.project.stdc.Stdc.DeclarationSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationAccess().getDeclaratorListInitDeclaratorListParserRuleCall_0_2_0());
					}
					lv_declaratorList_2_0=ruleInitDeclaratorList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationRule());
						}
						set(
							$current,
							"declaratorList",
							lv_declaratorList_2_0,
							"org.xtext.project.stdc.Stdc.InitDeclaratorList");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getDeclarationAccess().getSemicolonKeyword_0_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getStaticAssertDeclarationParserRuleCall_1());
		}
		this_StaticAssertDeclaration_4=ruleStaticAssertDeclaration
		{
			$current = $this_StaticAssertDeclaration_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDeclarationSpecifier
entryRuleDeclarationSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationSpecifierRule()); }
	iv_ruleDeclarationSpecifier=ruleDeclarationSpecifier
	{ $current=$iv_ruleDeclarationSpecifier.current; }
	EOF;

// Rule DeclarationSpecifier
ruleDeclarationSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationSpecifierAccess().getStoreClassStorageClassSpecifierParserRuleCall_0_0());
				}
				lv_storeClass_0_0=ruleStorageClassSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationSpecifierRule());
					}
					set(
						$current,
						"storeClass",
						lv_storeClass_0_0,
						"org.xtext.project.stdc.Stdc.StorageClassSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationSpecifierAccess().getTypeSpecifierParserRuleCall_1());
		}
		this_TypeSpecifier_1=ruleTypeSpecifier
		{
			$current = $this_TypeSpecifier_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationSpecifierAccess().getFuncSpecFunctionSpecifierParserRuleCall_2_0());
				}
				lv_funcSpec_2_0=ruleFunctionSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationSpecifierRule());
					}
					set(
						$current,
						"funcSpec",
						lv_funcSpec_2_0,
						"org.xtext.project.stdc.Stdc.FunctionSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationSpecifierAccess().getAlignmentSpecifierParserRuleCall_3());
		}
		this_AlignmentSpecifier_3=ruleAlignmentSpecifier
		{
			$current = $this_AlignmentSpecifier_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInitDeclaratorList
entryRuleInitDeclaratorList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitDeclaratorListRule()); }
	iv_ruleInitDeclaratorList=ruleInitDeclaratorList
	{ $current=$iv_ruleInitDeclaratorList.current; }
	EOF;

// Rule InitDeclaratorList
ruleInitDeclaratorList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInitDeclaratorListAccess().getIniDecInitDeclaratorParserRuleCall_0_0());
				}
				lv_iniDec_0_0=ruleInitDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitDeclaratorListRule());
					}
					set(
						$current,
						"iniDec",
						lv_iniDec_0_0,
						"org.xtext.project.stdc.Stdc.InitDeclarator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getInitDeclaratorListAccess().getInitDeclaListLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getInitDeclaratorListAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInitDeclaratorListAccess().getRightInitDeclaratorParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleInitDeclarator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitDeclaratorListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.InitDeclarator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleInitDeclarator
entryRuleInitDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitDeclaratorRule()); }
	iv_ruleInitDeclarator=ruleInitDeclarator
	{ $current=$iv_ruleInitDeclarator.current; }
	EOF;

// Rule InitDeclarator
ruleInitDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInitDeclaratorAccess().getDecDeclaratorParserRuleCall_0_0());
				}
				lv_dec_0_0=ruleDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitDeclaratorRule());
					}
					set(
						$current,
						"dec",
						lv_dec_0_0,
						"org.xtext.project.stdc.Stdc.Declarator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getInitDeclaratorAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInitDeclaratorAccess().getInitInitializerParserRuleCall_1_1_0());
					}
					lv_init_2_0=ruleInitializer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitDeclaratorRule());
						}
						set(
							$current,
							"init",
							lv_init_2_0,
							"org.xtext.project.stdc.Stdc.Initializer");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleStorageClassSpecifier
entryRuleStorageClassSpecifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStorageClassSpecifierRule()); }
	iv_ruleStorageClassSpecifier=ruleStorageClassSpecifier
	{ $current=$iv_ruleStorageClassSpecifier.current.getText(); }
	EOF;

// Rule StorageClassSpecifier
ruleStorageClassSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='typedef'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getTypedefKeyword_0());
		}
		    |
		kw='extern'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getExternKeyword_1());
		}
		    |
		kw='static'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getStaticKeyword_2());
		}
		    |
		kw='_Thread_local'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().get_Thread_localKeyword_3());
		}
		    |
		kw='auto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getAutoKeyword_4());
		}
		    |
		kw='register'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getRegisterKeyword_5());
		}
	)
;

// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); }
	iv_ruleTypeSpecifier=ruleTypeSpecifier
	{ $current=$iv_ruleTypeSpecifier.current; }
	EOF;

// Rule TypeSpecifier
ruleTypeSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeSpecifierAccess().getTypeSpecifierAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSpecifierAccess().getTypeTypesParserRuleCall_1_0_0());
					}
					lv_type_1_0=ruleTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSpecifierRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"org.xtext.project.stdc.Stdc.Types");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSpecifierAccess().getAtomicTypeAtomicTypeSpecifierParserRuleCall_1_1_0());
					}
					lv_atomicType_2_0=ruleAtomicTypeSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSpecifierRule());
						}
						set(
							$current,
							"atomicType",
							lv_atomicType_2_0,
							"org.xtext.project.stdc.Stdc.AtomicTypeSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSpecifierAccess().getStructSpecStructOrUnionSpecifierParserRuleCall_1_2_0());
					}
					lv_structSpec_3_0=ruleStructOrUnionSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSpecifierRule());
						}
						set(
							$current,
							"structSpec",
							lv_structSpec_3_0,
							"org.xtext.project.stdc.Stdc.StructOrUnionSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSpecifierAccess().getEnumSpecEnumSpecifierParserRuleCall_1_3_0());
					}
					lv_enumSpec_4_0=ruleEnumSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSpecifierRule());
						}
						set(
							$current,
							"enumSpec",
							lv_enumSpec_4_0,
							"org.xtext.project.stdc.Stdc.EnumSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTypes
entryRuleTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypesRule()); }
	iv_ruleTypes=ruleTypes
	{ $current=$iv_ruleTypes.current.getText(); }
	EOF;

// Rule Types
ruleTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='void'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getVoidKeyword_0());
		}
		    |
		kw='char'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getCharKeyword_1());
		}
		    |
		kw='short'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getShortKeyword_2());
		}
		    |
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getIntKeyword_3());
		}
		    |
		kw='long'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getLongKeyword_4());
		}
		    |
		kw='float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getFloatKeyword_5());
		}
		    |
		kw='double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getDoubleKeyword_6());
		}
		    |
		kw='signed'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getSignedKeyword_7());
		}
		    |
		kw='unsigned'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getUnsignedKeyword_8());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getBoolKeyword_9());
		}
		    |
		kw='complex'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getComplexKeyword_10());
		}
		    |
		kw='imaginary'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypesAccess().getImaginaryKeyword_11());
		}
	)
;

// Entry rule entryRuleStructOrUnionSpecifier
entryRuleStructOrUnionSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructOrUnionSpecifierRule()); }
	iv_ruleStructOrUnionSpecifier=ruleStructOrUnionSpecifier
	{ $current=$iv_ruleStructOrUnionSpecifier.current; }
	EOF;

// Rule StructOrUnionSpecifier
ruleStructOrUnionSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStructOrUnionSpecifierAccess().getStructListAction_0(),
					$current);
			}
		)
		{
			newCompositeNode(grammarAccess.getStructOrUnionSpecifierAccess().getStructOrUnionParserRuleCall_1());
		}
		ruleStructOrUnion
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				otherlv_2='{'
				{
					newLeafNode(otherlv_2, grammarAccess.getStructOrUnionSpecifierAccess().getLeftCurlyBracketKeyword_2_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStructOrUnionSpecifierAccess().getStructListStructDeclarationListParserRuleCall_2_0_1_0());
						}
						lv_structList_3_0=ruleStructDeclarationList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStructOrUnionSpecifierRule());
							}
							set(
								$current,
								"structList",
								lv_structList_3_0,
								"org.xtext.project.stdc.Stdc.StructDeclarationList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4='}'
				{
					newLeafNode(otherlv_4, grammarAccess.getStructOrUnionSpecifierAccess().getRightCurlyBracketKeyword_2_0_2());
				}
			)
			    |
			(
				this_ID_5=RULE_ID
				{
					newLeafNode(this_ID_5, grammarAccess.getStructOrUnionSpecifierAccess().getIDTerminalRuleCall_2_1_0());
				}
				(
					otherlv_6='{'
					{
						newLeafNode(otherlv_6, grammarAccess.getStructOrUnionSpecifierAccess().getLeftCurlyBracketKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getStructOrUnionSpecifierAccess().getStructListStructDeclarationListParserRuleCall_2_1_1_1_0());
							}
							lv_structList_7_0=ruleStructDeclarationList
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getStructOrUnionSpecifierRule());
								}
								set(
									$current,
									"structList",
									lv_structList_7_0,
									"org.xtext.project.stdc.Stdc.StructDeclarationList");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_8='}'
					{
						newLeafNode(otherlv_8, grammarAccess.getStructOrUnionSpecifierAccess().getRightCurlyBracketKeyword_2_1_1_2());
					}
				)?
			)
		)
	)
;

// Entry rule entryRuleStructOrUnion
entryRuleStructOrUnion returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStructOrUnionRule()); }
	iv_ruleStructOrUnion=ruleStructOrUnion
	{ $current=$iv_ruleStructOrUnion.current.getText(); }
	EOF;

// Rule StructOrUnion
ruleStructOrUnion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='struct'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructOrUnionAccess().getStructKeyword_0());
		}
		    |
		kw='union'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructOrUnionAccess().getUnionKeyword_1());
		}
	)
;

// Entry rule entryRuleStructDeclarationList
entryRuleStructDeclarationList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructDeclarationListRule()); }
	iv_ruleStructDeclarationList=ruleStructDeclarationList
	{ $current=$iv_ruleStructDeclarationList.current; }
	EOF;

// Rule StructDeclarationList
ruleStructDeclarationList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStructDeclarationListAccess().getStructDeclarationStructDeclarationParserRuleCall_0());
			}
			lv_structDeclaration_0_0=ruleStructDeclaration
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStructDeclarationListRule());
				}
				add(
					$current,
					"structDeclaration",
					lv_structDeclaration_0_0,
					"org.xtext.project.stdc.Stdc.StructDeclaration");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleStructDeclaration
entryRuleStructDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructDeclarationRule()); }
	iv_ruleStructDeclaration=ruleStructDeclaration
	{ $current=$iv_ruleStructDeclaration.current; }
	EOF;

// Rule StructDeclaration
ruleStructDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStructDeclarationAccess().getSpecifierStuctListAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStructDeclarationAccess().getSpecifierListSpecifierQualifierListParserRuleCall_0_1_0());
					}
					lv_specifierList_1_0=ruleSpecifierQualifierList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructDeclarationRule());
						}
						set(
							$current,
							"specifierList",
							lv_specifierList_1_0,
							"org.xtext.project.stdc.Stdc.SpecifierQualifierList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStructDeclarationAccess().getStructListStructDeclaratorListParserRuleCall_0_2_0());
					}
					lv_structList_2_0=ruleStructDeclaratorList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructDeclarationRule());
						}
						set(
							$current,
							"structList",
							lv_structList_2_0,
							"org.xtext.project.stdc.Stdc.StructDeclaratorList");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getStructDeclarationAccess().getSemicolonKeyword_0_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getStructDeclarationAccess().getStaticAssertDeclarationParserRuleCall_1());
		}
		this_StaticAssertDeclaration_4=ruleStaticAssertDeclaration
		{
			$current = $this_StaticAssertDeclaration_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSpecifierQualifierList
entryRuleSpecifierQualifierList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecifierQualifierListRule()); }
	iv_ruleSpecifierQualifierList=ruleSpecifierQualifierList
	{ $current=$iv_ruleSpecifierQualifierList.current; }
	EOF;

// Rule SpecifierQualifierList
ruleSpecifierQualifierList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSpecifierQualifierListAccess().getTypeSpecifierListAction_0(),
					$current);
			}
		)
		(
			(
				((
					ruleTypeSpecifier
				)
				)=>
				(
					{
						newCompositeNode(grammarAccess.getSpecifierQualifierListAccess().getTypeTypeSpecifierParserRuleCall_1_0_0());
					}
					lv_type_1_0=ruleTypeSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecifierQualifierListRule());
						}
						add(
							$current,
							"type",
							lv_type_1_0,
							"org.xtext.project.stdc.Stdc.TypeSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSpecifierQualifierListAccess().getTypeQualTypeQualifierParserRuleCall_1_1_0());
					}
					lv_typeQual_2_0=ruleTypeQualifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecifierQualifierListRule());
						}
						add(
							$current,
							"typeQual",
							lv_typeQual_2_0,
							"org.xtext.project.stdc.Stdc.TypeQualifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleStructDeclaratorList
entryRuleStructDeclaratorList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructDeclaratorListRule()); }
	iv_ruleStructDeclaratorList=ruleStructDeclaratorList
	{ $current=$iv_ruleStructDeclaratorList.current; }
	EOF;

// Rule StructDeclaratorList
ruleStructDeclaratorList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorParserRuleCall_0());
		}
		this_StructDeclarator_0=ruleStructDeclarator
		{
			$current = $this_StructDeclarator_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getStructDeclaratorListAccess().getStructListLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getStructDeclaratorListAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStructDeclaratorListAccess().getRightStructDeclaratorParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleStructDeclarator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructDeclaratorListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.StructDeclarator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStructDeclarator
entryRuleStructDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructDeclaratorRule()); }
	iv_ruleStructDeclarator=ruleStructDeclarator
	{ $current=$iv_ruleStructDeclarator.current; }
	EOF;

// Rule StructDeclarator
ruleStructDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStructDeclaratorAccess().getStructConstantExpAction_0_0(),
						$current);
				}
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getStructDeclaratorAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStructDeclaratorAccess().getConstantExpConstantExpressionParserRuleCall_0_2_0());
					}
					lv_constantExp_2_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructDeclaratorRule());
						}
						set(
							$current,
							"constantExp",
							lv_constantExp_2_0,
							"org.xtext.project.stdc.Stdc.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStructDeclaratorAccess().getDeclaratorConstantExpAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStructDeclaratorAccess().getDeclDeclaratorParserRuleCall_1_1_0());
					}
					lv_decl_4_0=ruleDeclarator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructDeclaratorRule());
						}
						set(
							$current,
							"decl",
							lv_decl_4_0,
							"org.xtext.project.stdc.Stdc.Declarator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=':'
				{
					newLeafNode(otherlv_5, grammarAccess.getStructDeclaratorAccess().getColonKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStructDeclaratorAccess().getConstantExpConstantExpressionParserRuleCall_1_2_1_0());
						}
						lv_constantExp_6_0=ruleConstantExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStructDeclaratorRule());
							}
							set(
								$current,
								"constantExp",
								lv_constantExp_6_0,
								"org.xtext.project.stdc.Stdc.ConstantExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleEnumSpecifier
entryRuleEnumSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumSpecifierRule()); }
	iv_ruleEnumSpecifier=ruleEnumSpecifier
	{ $current=$iv_ruleEnumSpecifier.current; }
	EOF;

// Rule EnumSpecifier
ruleEnumSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumSpecifierAccess().getEnumSpecificAction_0(),
					$current);
			}
		)
		otherlv_1='enum'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumSpecifierAccess().getEnumKeyword_1());
		}
		(
			(
				otherlv_2='{'
				{
					newLeafNode(otherlv_2, grammarAccess.getEnumSpecifierAccess().getLeftCurlyBracketKeyword_2_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEnumSpecifierAccess().getEnumListEnumeratorListParserRuleCall_2_0_1_0());
						}
						lv_enumList_3_0=ruleEnumeratorList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEnumSpecifierRule());
							}
							set(
								$current,
								"enumList",
								lv_enumList_3_0,
								"org.xtext.project.stdc.Stdc.EnumeratorList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getEnumSpecifierAccess().getCommaKeyword_2_0_2());
					}
				)?
				otherlv_5='}'
				{
					newLeafNode(otherlv_5, grammarAccess.getEnumSpecifierAccess().getRightCurlyBracketKeyword_2_0_3());
				}
			)
			    |
			(
				this_ID_6=RULE_ID
				{
					newLeafNode(this_ID_6, grammarAccess.getEnumSpecifierAccess().getIDTerminalRuleCall_2_1_0());
				}
				(
					otherlv_7='{'
					{
						newLeafNode(otherlv_7, grammarAccess.getEnumSpecifierAccess().getLeftCurlyBracketKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getEnumSpecifierAccess().getEnumListEnumeratorListParserRuleCall_2_1_1_1_0());
							}
							lv_enumList_8_0=ruleEnumeratorList
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEnumSpecifierRule());
								}
								set(
									$current,
									"enumList",
									lv_enumList_8_0,
									"org.xtext.project.stdc.Stdc.EnumeratorList");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_9=','
						{
							newLeafNode(otherlv_9, grammarAccess.getEnumSpecifierAccess().getCommaKeyword_2_1_1_2());
						}
					)?
					otherlv_10='}'
					{
						newLeafNode(otherlv_10, grammarAccess.getEnumSpecifierAccess().getRightCurlyBracketKeyword_2_1_1_3());
					}
				)?
			)
		)
	)
;

// Entry rule entryRuleEnumeratorList
entryRuleEnumeratorList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumeratorListRule()); }
	iv_ruleEnumeratorList=ruleEnumeratorList
	{ $current=$iv_ruleEnumeratorList.current; }
	EOF;

// Rule EnumeratorList
ruleEnumeratorList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnumeratorListAccess().getEnumeratorParserRuleCall_0());
		}
		this_Enumerator_0=ruleEnumerator
		{
			$current = $this_Enumerator_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEnumeratorListAccess().getEnumListLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getEnumeratorListAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumeratorListAccess().getRightEnumeratorParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleEnumerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumeratorListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.Enumerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEnumerator
entryRuleEnumerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumeratorRule()); }
	iv_ruleEnumerator=ruleEnumerator
	{ $current=$iv_ruleEnumerator.current; }
	EOF;

// Rule Enumerator
ruleEnumerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumeratorAccess().getEnumAttAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumeratorAccess().getEnumConstEnumerationConstantParserRuleCall_1_0());
				}
				lv_enumConst_1_0=ruleEnumerationConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumeratorRule());
					}
					set(
						$current,
						"enumConst",
						lv_enumConst_1_0,
						"org.xtext.project.stdc.Stdc.EnumerationConstant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getEnumeratorAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumeratorAccess().getExpConstantExpressionParserRuleCall_2_1_0());
					}
					lv_exp_3_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumeratorRule());
						}
						set(
							$current,
							"exp",
							lv_exp_3_0,
							"org.xtext.project.stdc.Stdc.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAtomicTypeSpecifier
entryRuleAtomicTypeSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicTypeSpecifierRule()); }
	iv_ruleAtomicTypeSpecifier=ruleAtomicTypeSpecifier
	{ $current=$iv_ruleAtomicTypeSpecifier.current; }
	EOF;

// Rule AtomicTypeSpecifier
ruleAtomicTypeSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='_Atomic'
		{
			newLeafNode(otherlv_0, grammarAccess.getAtomicTypeSpecifierAccess().get_AtomicKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAtomicTypeSpecifierAccess().getCastRuleParserRuleCall_1());
		}
		this_CastRule_1=ruleCastRule
		{
			$current = $this_CastRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeQualifier
entryRuleTypeQualifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeQualifierRule()); }
	iv_ruleTypeQualifier=ruleTypeQualifier
	{ $current=$iv_ruleTypeQualifier.current.getText(); }
	EOF;

// Rule TypeQualifier
ruleTypeQualifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='const'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeQualifierAccess().getConstKeyword_0());
		}
		    |
		kw='restrict'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeQualifierAccess().getRestrictKeyword_1());
		}
		    |
		kw='volatile'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeQualifierAccess().getVolatileKeyword_2());
		}
		    |
		kw='_Atomic'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeQualifierAccess().get_AtomicKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionSpecifier
entryRuleFunctionSpecifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionSpecifierRule()); }
	iv_ruleFunctionSpecifier=ruleFunctionSpecifier
	{ $current=$iv_ruleFunctionSpecifier.current.getText(); }
	EOF;

// Rule FunctionSpecifier
ruleFunctionSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='inline'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionSpecifierAccess().getInlineKeyword_0());
		}
		    |
		kw='_Noreturn'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionSpecifierAccess().get_NoreturnKeyword_1());
		}
	)
;

// Entry rule entryRuleAlignmentSpecifier
entryRuleAlignmentSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlignmentSpecifierRule()); }
	iv_ruleAlignmentSpecifier=ruleAlignmentSpecifier
	{ $current=$iv_ruleAlignmentSpecifier.current; }
	EOF;

// Rule AlignmentSpecifier
ruleAlignmentSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlignmentSpecifierAccess().getAlignmentAction_0(),
					$current);
			}
		)
		{
			newCompositeNode(grammarAccess.getAlignmentSpecifierAccess().getAlignasParserRuleCall_1());
		}
		ruleAlignas
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAlignmentSpecifierAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlignmentSpecifierAccess().getTypeTypeNameParserRuleCall_3_0_0());
					}
					lv_type_3_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlignmentSpecifierRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.xtext.project.stdc.Stdc.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAlignmentSpecifierAccess().getExpConstantExpressionParserRuleCall_3_1_0());
					}
					lv_exp_4_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlignmentSpecifierRule());
						}
						set(
							$current,
							"exp",
							lv_exp_4_0,
							"org.xtext.project.stdc.Stdc.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAlignmentSpecifierAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAlignas
entryRuleAlignas returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAlignasRule()); }
	iv_ruleAlignas=ruleAlignas
	{ $current=$iv_ruleAlignas.current.getText(); }
	EOF;

// Rule Alignas
ruleAlignas returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='_Alignas'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAlignasAccess().get_AlignasKeyword());
	}
;

// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); }
	iv_ruleDeclarator=ruleDeclarator
	{ $current=$iv_ruleDeclarator.current; }
	EOF;

// Rule Declarator
ruleDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaratorAccess().getPointPointerParserRuleCall_0_0());
				}
				lv_point_0_0=rulePointer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaratorRule());
					}
					set(
						$current,
						"point",
						lv_point_0_0,
						"org.xtext.project.stdc.Stdc.Pointer");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaratorAccess().getDirectDeclDirectDeclaratorParserRuleCall_1_0());
				}
				lv_directDecl_1_0=ruleDirectDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaratorRule());
					}
					set(
						$current,
						"directDecl",
						lv_directDecl_1_0,
						"org.xtext.project.stdc.Stdc.DirectDeclarator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDirectDeclarator
entryRuleDirectDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectDeclaratorRule()); }
	iv_ruleDirectDeclarator=ruleDirectDeclarator
	{ $current=$iv_ruleDirectDeclarator.current; }
	EOF;

// Rule DirectDeclarator
ruleDirectDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDirectDeclaratorAccess().getDirectDeclaratorAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getDirectDeclaratorAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDirectDeclaratorRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getDirectDeclaratorAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectDeclaratorAccess().getDcDeclaratorParserRuleCall_1_1_1_0());
						}
						lv_dc_3_0=ruleDeclarator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectDeclaratorRule());
							}
							set(
								$current,
								"dc",
								lv_dc_3_0,
								"org.xtext.project.stdc.Stdc.Declarator");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getDirectDeclaratorAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectDeclaratorAccess().getDeclarator2DirectDeclarator2ParserRuleCall_2_0());
				}
				lv_declarator2_5_0=ruleDirectDeclarator2
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectDeclaratorRule());
					}
					add(
						$current,
						"declarator2",
						lv_declarator2_5_0,
						"org.xtext.project.stdc.Stdc.DirectDeclarator2");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDirectDeclarator2
entryRuleDirectDeclarator2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectDeclarator2Rule()); }
	iv_ruleDirectDeclarator2=ruleDirectDeclarator2
	{ $current=$iv_ruleDirectDeclarator2.current; }
	EOF;

// Rule DirectDeclarator2
ruleDirectDeclarator2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD2Action_0_0(),
						$current);
				}
			)
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_0_1());
			}
			(
				otherlv_2='*'
				{
					newLeafNode(otherlv_2, grammarAccess.getDirectDeclarator2Access().getAsteriskKeyword_0_2());
				}
			)?
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD3Action_1_0(),
						$current);
				}
			)
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_1_1());
			}
			otherlv_6='static'
			{
				newLeafNode(otherlv_6, grammarAccess.getDirectDeclarator2Access().getStaticKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_1_3_0());
					}
					lv_typeQualList_7_0=ruleTypeQualifierList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"typeQualList",
							lv_typeQualList_7_0,
							"org.xtext.project.stdc.Stdc.TypeQualifierList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getExpAssignmentExpressionParserRuleCall_1_4_0());
					}
					lv_exp_8_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"exp",
							lv_exp_8_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=']'
			{
				newLeafNode(otherlv_9, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_1_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD4Action_2_0(),
						$current);
				}
			)
			otherlv_11='['
			{
				newLeafNode(otherlv_11, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_2_1());
			}
			otherlv_12='static'
			{
				newLeafNode(otherlv_12, grammarAccess.getDirectDeclarator2Access().getStaticKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getExpAssignmentExpressionParserRuleCall_2_3_0());
					}
					lv_exp_13_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"exp",
							lv_exp_13_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=']'
			{
				newLeafNode(otherlv_14, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_2_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD5Action_3_0(),
						$current);
				}
			)
			otherlv_16='['
			{
				newLeafNode(otherlv_16, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_3_2_0());
					}
					lv_typeQualList_17_0=ruleTypeQualifierList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"typeQualList",
							lv_typeQualList_17_0,
							"org.xtext.project.stdc.Stdc.TypeQualifierList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18='*'
			{
				newLeafNode(otherlv_18, grammarAccess.getDirectDeclarator2Access().getAsteriskKeyword_3_3());
			}
			otherlv_19=']'
			{
				newLeafNode(otherlv_19, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_3_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD6Action_4_0(),
						$current);
				}
			)
			otherlv_21='['
			{
				newLeafNode(otherlv_21, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_4_2_0());
					}
					lv_typeQualList_22_0=ruleTypeQualifierList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"typeQualList",
							lv_typeQualList_22_0,
							"org.xtext.project.stdc.Stdc.TypeQualifierList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_23='static'
			{
				newLeafNode(otherlv_23, grammarAccess.getDirectDeclarator2Access().getStaticKeyword_4_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getExpAssignmentExpressionParserRuleCall_4_4_0());
					}
					lv_exp_24_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"exp",
							lv_exp_24_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_25=']'
			{
				newLeafNode(otherlv_25, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_4_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD7Action_5_0(),
						$current);
				}
			)
			otherlv_27='['
			{
				newLeafNode(otherlv_27, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_5_2_0());
					}
					lv_typeQualList_28_0=ruleTypeQualifierList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"typeQualList",
							lv_typeQualList_28_0,
							"org.xtext.project.stdc.Stdc.TypeQualifierList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getExpAssignmentExpressionParserRuleCall_5_3_0());
					}
					lv_exp_29_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"exp",
							lv_exp_29_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_30=']'
			{
				newLeafNode(otherlv_30, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_5_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD8Action_6_0(),
						$current);
				}
			)
			otherlv_32='['
			{
				newLeafNode(otherlv_32, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_6_2_0());
					}
					lv_typeQualList_33_0=ruleTypeQualifierList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"typeQualList",
							lv_typeQualList_33_0,
							"org.xtext.project.stdc.Stdc.TypeQualifierList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_34=']'
			{
				newLeafNode(otherlv_34, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_6_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getD9Action_7_0(),
						$current);
				}
			)
			otherlv_36='['
			{
				newLeafNode(otherlv_36, grammarAccess.getDirectDeclarator2Access().getLeftSquareBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectDeclarator2Access().getExpAssignmentExpressionParserRuleCall_7_2_0());
					}
					lv_exp_37_0=ruleAssignmentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
						}
						set(
							$current,
							"exp",
							lv_exp_37_0,
							"org.xtext.project.stdc.Stdc.AssignmentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_38=']'
			{
				newLeafNode(otherlv_38, grammarAccess.getDirectDeclarator2Access().getRightSquareBracketKeyword_7_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectDeclarator2Access().getFunctionParametersDeclAction_8_0(),
						$current);
				}
			)
			otherlv_40='('
			{
				newLeafNode(otherlv_40, grammarAccess.getDirectDeclarator2Access().getLeftParenthesisKeyword_8_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectDeclarator2Access().getIdListIdentifierListParserRuleCall_8_2_0_0());
						}
						lv_idList_41_0=ruleIdentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
							}
							set(
								$current,
								"idList",
								lv_idList_41_0,
								"org.xtext.project.stdc.Stdc.IdentifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectDeclarator2Access().getParamListParameterTypeListParserRuleCall_8_2_1_0());
						}
						lv_paramList_42_0=ruleParameterTypeList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectDeclarator2Rule());
							}
							set(
								$current,
								"paramList",
								lv_paramList_42_0,
								"org.xtext.project.stdc.Stdc.ParameterTypeList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_43=')'
			{
				newLeafNode(otherlv_43, grammarAccess.getDirectDeclarator2Access().getRightParenthesisKeyword_8_3());
			}
		)
	)
;

// Entry rule entryRulePointer
entryRulePointer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerRule()); }
	iv_rulePointer=rulePointer
	{ $current=$iv_rulePointer.current; }
	EOF;

// Rule Pointer
rulePointer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPointerAccess().getPointerRuleAction_0(),
					$current);
			}
		)
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getPointerAccess().getAsteriskKeyword_1());
		}
		(
			((
				(
					(
						ruleTypeQualifier
					)
				)
				    |
				'*'
			)
			)=>
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPointerAccess().getTypeQualListTypeQualifierParserRuleCall_2_0_0_0());
						}
						lv_typeQualList_2_0=ruleTypeQualifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPointerRule());
							}
							add(
								$current,
								"typeQualList",
								lv_typeQualList_2_0,
								"org.xtext.project.stdc.Stdc.TypeQualifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				otherlv_3='*'
				{
					newLeafNode(otherlv_3, grammarAccess.getPointerAccess().getAsteriskKeyword_2_0_1());
				}
			)
		)*
	)
;

// Entry rule entryRuleTypeQualifierList
entryRuleTypeQualifierList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeQualifierListRule()); }
	iv_ruleTypeQualifierList=ruleTypeQualifierList
	{ $current=$iv_ruleTypeQualifierList.current; }
	EOF;

// Rule TypeQualifierList
ruleTypeQualifierList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTypeQualifierListAccess().getTypeQualListTypeQualifierParserRuleCall_0());
			}
			lv_typeQualList_0_0=ruleTypeQualifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTypeQualifierListRule());
				}
				add(
					$current,
					"typeQualList",
					lv_typeQualList_0_0,
					"org.xtext.project.stdc.Stdc.TypeQualifier");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleParameterTypeList
entryRuleParameterTypeList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterTypeListRule()); }
	iv_ruleParameterTypeList=ruleParameterTypeList
	{ $current=$iv_ruleParameterTypeList.current; }
	EOF;

// Rule ParameterTypeList
ruleParameterTypeList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterTypeListAccess().getParameterListParserRuleCall_0());
		}
		this_ParameterList_0=ruleParameterList
		{
			$current = $this_ParameterList_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterTypeListAccess().getCommaKeyword_1_0());
			}
			otherlv_2='...'
			{
				newLeafNode(otherlv_2, grammarAccess.getParameterTypeListAccess().getFullStopFullStopFullStopKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current; }
	EOF;

// Rule ParameterList
ruleParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclarationParserRuleCall_0());
		}
		this_ParameterDeclaration_0=ruleParameterDeclaration
		{
			$current = $this_ParameterDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getParameterListAccess().getParameterDeclarationListLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getParameterListAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getRightParameterDeclarationParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleParameterDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.ParameterDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); }
	iv_ruleParameterDeclaration=ruleParameterDeclaration
	{ $current=$iv_ruleParameterDeclaration.current; }
	EOF;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterDeclarationAccess().getDeclarationAbstractAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecDeclarationSpecifierParserRuleCall_1_0());
				}
				lv_declarationSpec_1_0=ruleDeclarationSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
					}
					add(
						$current,
						"declarationSpec",
						lv_declarationSpec_1_0,
						"org.xtext.project.stdc.Stdc.DeclarationSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterDeclarationAccess().getAbstractAbstractDeclaratorParserRuleCall_2_0_0());
					}
					lv_abstract_2_0=ruleAbstractDeclarator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
						}
						set(
							$current,
							"abstract",
							lv_abstract_2_0,
							"org.xtext.project.stdc.Stdc.AbstractDeclarator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				((
					ruleDeclarator
				)
				)=>
				(
					{
						newCompositeNode(grammarAccess.getParameterDeclarationAccess().getDeclaratorDeclaratorParserRuleCall_2_1_0());
					}
					lv_declarator_3_0=ruleDeclarator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
						}
						set(
							$current,
							"declarator",
							lv_declarator_3_0,
							"org.xtext.project.stdc.Stdc.Declarator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleIdentifierList
entryRuleIdentifierList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleIdentifierList=ruleIdentifierList
	{ $current=$iv_ruleIdentifierList.current.getText(); }
	EOF;

// Rule IdentifierList
ruleIdentifierList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getIdentifierListAccess().getIDTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getIdentifierListAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current; }
	EOF;

// Rule TypeName
ruleTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeNameAccess().getTypeNameRuleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeNameAccess().getSpecifierQualListSpecifierQualifierListParserRuleCall_1_0());
				}
				lv_specifierQualList_1_0=ruleSpecifierQualifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeNameRule());
					}
					set(
						$current,
						"specifierQualList",
						lv_specifierQualList_1_0,
						"org.xtext.project.stdc.Stdc.SpecifierQualifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				ruleAbstractDeclarator
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getTypeNameAccess().getAbsDeclaratorAbstractDeclaratorParserRuleCall_2_0());
				}
				lv_absDeclarator_2_0=ruleAbstractDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeNameRule());
					}
					set(
						$current,
						"absDeclarator",
						lv_absDeclarator_2_0,
						"org.xtext.project.stdc.Stdc.AbstractDeclarator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAbstractDeclarator
entryRuleAbstractDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractDeclaratorRule()); }
	iv_ruleAbstractDeclarator=ruleAbstractDeclarator
	{ $current=$iv_ruleAbstractDeclarator.current; }
	EOF;

// Rule AbstractDeclarator
ruleAbstractDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAbstractDeclaratorAccess().getAbstractDeclaratorPointerAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAbstractDeclaratorAccess().getPointPointerParserRuleCall_0_1_0());
					}
					lv_point_1_0=rulePointer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAbstractDeclaratorRule());
						}
						set(
							$current,
							"point",
							lv_point_1_0,
							"org.xtext.project.stdc.Stdc.Pointer");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAbstractDeclaratorAccess().getAbstractDeclaratorDirectAbstractDeclaratorParserRuleCall_0_2_0());
					}
					lv_abstractDeclarator_2_0=ruleDirectAbstractDeclarator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAbstractDeclaratorRule());
						}
						set(
							$current,
							"abstractDeclarator",
							lv_abstractDeclarator_2_0,
							"org.xtext.project.stdc.Stdc.DirectAbstractDeclarator");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractDeclaratorAccess().getAbstractDeclaratorDirectAbstractDeclaratorParserRuleCall_1_0());
				}
				lv_abstractDeclarator_3_0=ruleDirectAbstractDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractDeclaratorRule());
					}
					set(
						$current,
						"abstractDeclarator",
						lv_abstractDeclarator_3_0,
						"org.xtext.project.stdc.Stdc.DirectAbstractDeclarator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDirectAbstractDeclarator
entryRuleDirectAbstractDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectAbstractDeclaratorRule()); }
	iv_ruleDirectAbstractDeclarator=ruleDirectAbstractDeclarator
	{ $current=$iv_ruleDirectAbstractDeclarator.current; }
	EOF;

// Rule DirectAbstractDeclarator
ruleDirectAbstractDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDirectAbstractDeclaratorAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDirectAbstractDeclaratorAccess().getAbstractDeclaratorParserRuleCall_1());
		}
		this_AbstractDeclarator_1=ruleAbstractDeclarator
		{
			$current = $this_AbstractDeclarator_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getDirectAbstractDeclaratorAccess().getRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectAbstractDeclaratorAccess().getDirect_declarator2DirectAbstractDeclarator2ParserRuleCall_3_0());
				}
				lv_direct_declarator2_3_0=ruleDirectAbstractDeclarator2
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclaratorRule());
					}
					add(
						$current,
						"direct_declarator2",
						lv_direct_declarator2_3_0,
						"org.xtext.project.stdc.Stdc.DirectAbstractDeclarator2");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDirectAbstractDeclarator2
entryRuleDirectAbstractDeclarator2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Rule()); }
	iv_ruleDirectAbstractDeclarator2=ruleDirectAbstractDeclarator2
	{ $current=$iv_ruleDirectAbstractDeclarator2.current; }
	EOF;

// Rule DirectAbstractDeclarator2
ruleDirectAbstractDeclarator2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDirectAbstractDeclarator2Access().getDirect_declarator2Action_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='['
				{
					newLeafNode(otherlv_1, grammarAccess.getDirectAbstractDeclarator2Access().getLeftSquareBracketKeyword_1_0_0());
				}
				(
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getDirectAbstractDeclarator2Access().getAsteriskKeyword_1_0_1());
					}
				)?
				otherlv_3=']'
				{
					newLeafNode(otherlv_3, grammarAccess.getDirectAbstractDeclarator2Access().getRightSquareBracketKeyword_1_0_2());
				}
			)
			    |
			(
				otherlv_4='['
				{
					newLeafNode(otherlv_4, grammarAccess.getDirectAbstractDeclarator2Access().getLeftSquareBracketKeyword_1_1_0());
				}
				otherlv_5='static'
				{
					newLeafNode(otherlv_5, grammarAccess.getDirectAbstractDeclarator2Access().getStaticKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_1_1_2_0());
						}
						lv_typeQualList_6_0=ruleTypeQualifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"typeQualList",
								lv_typeQualList_6_0,
								"org.xtext.project.stdc.Stdc.TypeQualifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getExpAssignmentExpressionParserRuleCall_1_1_3_0());
						}
						lv_exp_7_0=ruleAssignmentExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"exp",
								lv_exp_7_0,
								"org.xtext.project.stdc.Stdc.AssignmentExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=']'
				{
					newLeafNode(otherlv_8, grammarAccess.getDirectAbstractDeclarator2Access().getRightSquareBracketKeyword_1_1_4());
				}
			)
			    |
			(
				otherlv_9='['
				{
					newLeafNode(otherlv_9, grammarAccess.getDirectAbstractDeclarator2Access().getLeftSquareBracketKeyword_1_2_0());
				}
				otherlv_10='static'
				{
					newLeafNode(otherlv_10, grammarAccess.getDirectAbstractDeclarator2Access().getStaticKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getExpAssignmentExpressionParserRuleCall_1_2_2_0());
						}
						lv_exp_11_0=ruleAssignmentExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"exp",
								lv_exp_11_0,
								"org.xtext.project.stdc.Stdc.AssignmentExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_12=']'
				{
					newLeafNode(otherlv_12, grammarAccess.getDirectAbstractDeclarator2Access().getRightSquareBracketKeyword_1_2_3());
				}
			)
			    |
			(
				otherlv_13='['
				{
					newLeafNode(otherlv_13, grammarAccess.getDirectAbstractDeclarator2Access().getLeftSquareBracketKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_1_3_1_0());
						}
						lv_typeQualList_14_0=ruleTypeQualifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"typeQualList",
								lv_typeQualList_14_0,
								"org.xtext.project.stdc.Stdc.TypeQualifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_15='static'
				{
					newLeafNode(otherlv_15, grammarAccess.getDirectAbstractDeclarator2Access().getStaticKeyword_1_3_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getExpAssignmentExpressionParserRuleCall_1_3_3_0());
						}
						lv_exp_16_0=ruleAssignmentExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"exp",
								lv_exp_16_0,
								"org.xtext.project.stdc.Stdc.AssignmentExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_17=']'
				{
					newLeafNode(otherlv_17, grammarAccess.getDirectAbstractDeclarator2Access().getRightSquareBracketKeyword_1_3_4());
				}
			)
			    |
			(
				otherlv_18='['
				{
					newLeafNode(otherlv_18, grammarAccess.getDirectAbstractDeclarator2Access().getLeftSquareBracketKeyword_1_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_1_4_1_0());
						}
						lv_typeQualList_19_0=ruleTypeQualifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"typeQualList",
								lv_typeQualList_19_0,
								"org.xtext.project.stdc.Stdc.TypeQualifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getExpAssignmentExpressionParserRuleCall_1_4_2_0());
						}
						lv_exp_20_0=ruleAssignmentExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"exp",
								lv_exp_20_0,
								"org.xtext.project.stdc.Stdc.AssignmentExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_21=']'
				{
					newLeafNode(otherlv_21, grammarAccess.getDirectAbstractDeclarator2Access().getRightSquareBracketKeyword_1_4_3());
				}
			)
			    |
			(
				otherlv_22='['
				{
					newLeafNode(otherlv_22, grammarAccess.getDirectAbstractDeclarator2Access().getLeftSquareBracketKeyword_1_5_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getTypeQualListTypeQualifierListParserRuleCall_1_5_1_0());
						}
						lv_typeQualList_23_0=ruleTypeQualifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"typeQualList",
								lv_typeQualList_23_0,
								"org.xtext.project.stdc.Stdc.TypeQualifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_24=']'
				{
					newLeafNode(otherlv_24, grammarAccess.getDirectAbstractDeclarator2Access().getRightSquareBracketKeyword_1_5_2());
				}
			)
			    |
			(
				otherlv_25='['
				{
					newLeafNode(otherlv_25, grammarAccess.getDirectAbstractDeclarator2Access().getLeftSquareBracketKeyword_1_6_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getExpAssignmentExpressionParserRuleCall_1_6_1_0());
						}
						lv_exp_26_0=ruleAssignmentExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"exp",
								lv_exp_26_0,
								"org.xtext.project.stdc.Stdc.AssignmentExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_27=']'
				{
					newLeafNode(otherlv_27, grammarAccess.getDirectAbstractDeclarator2Access().getRightSquareBracketKeyword_1_6_2());
				}
			)
			    |
			(
				otherlv_28='('
				{
					newLeafNode(otherlv_28, grammarAccess.getDirectAbstractDeclarator2Access().getLeftParenthesisKeyword_1_7_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDirectAbstractDeclarator2Access().getParamListParameterTypeListParserRuleCall_1_7_1_0());
						}
						lv_paramList_29_0=ruleParameterTypeList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDirectAbstractDeclarator2Rule());
							}
							set(
								$current,
								"paramList",
								lv_paramList_29_0,
								"org.xtext.project.stdc.Stdc.ParameterTypeList");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_30=')'
				{
					newLeafNode(otherlv_30, grammarAccess.getDirectAbstractDeclarator2Access().getRightParenthesisKeyword_1_7_2());
				}
			)
		)
	)
;

// Entry rule entryRuleInitializer
entryRuleInitializer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializerRule()); }
	iv_ruleInitializer=ruleInitializer
	{ $current=$iv_ruleInitializer.current; }
	EOF;

// Rule Initializer
ruleInitializer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInitializerAccess().getInit_listAction_0_0(),
						$current);
				}
			)
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getInitializerAccess().getLeftCurlyBracketKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInitializerAccess().getInitInitializerListParserRuleCall_0_2_0());
					}
					lv_init_2_0=ruleInitializerList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitializerRule());
						}
						set(
							$current,
							"init",
							lv_init_2_0,
							"org.xtext.project.stdc.Stdc.InitializerList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getInitializerAccess().getCommaKeyword_0_3());
				}
			)?
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getInitializerAccess().getRightCurlyBracketKeyword_0_4());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getInitializerAccess().getExpAssignmentExpressionParserRuleCall_1_0());
				}
				lv_exp_5_0=ruleAssignmentExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitializerRule());
					}
					set(
						$current,
						"exp",
						lv_exp_5_0,
						"org.xtext.project.stdc.Stdc.AssignmentExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitializerList
entryRuleInitializerList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializerListRule()); }
	iv_ruleInitializerList=ruleInitializerList
	{ $current=$iv_ruleInitializerList.current; }
	EOF;

// Rule InitializerList
ruleInitializerList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInitializerListAccess().getInitializerList2ParserRuleCall_0());
		}
		this_InitializerList2_0=ruleInitializerList2
		{
			$current = $this_InitializerList2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					','
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getInitializerListAccess().getInitLisLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getInitializerListAccess().getCommaKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInitializerListAccess().getRightInitializerList2ParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleInitializerList2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitializerListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.project.stdc.Stdc.InitializerList2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleInitializerList2
entryRuleInitializerList2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializerList2Rule()); }
	iv_ruleInitializerList2=ruleInitializerList2
	{ $current=$iv_ruleInitializerList2.current; }
	EOF;

// Rule InitializerList2
ruleInitializerList2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInitializerList2Access().getDesigDesignationParserRuleCall_0_0());
				}
				lv_Desig_0_0=ruleDesignation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitializerList2Rule());
					}
					set(
						$current,
						"Desig",
						lv_Desig_0_0,
						"org.xtext.project.stdc.Stdc.Designation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getInitializerList2Access().getInitInitializerParserRuleCall_1_0());
				}
				lv_Init_1_0=ruleInitializer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitializerList2Rule());
					}
					set(
						$current,
						"Init",
						lv_Init_1_0,
						"org.xtext.project.stdc.Stdc.Initializer");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDesignation
entryRuleDesignation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDesignationRule()); }
	iv_ruleDesignation=ruleDesignation
	{ $current=$iv_ruleDesignation.current; }
	EOF;

// Rule Designation
ruleDesignation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDesignationAccess().getDesignatorListParserRuleCall_0());
		}
		this_DesignatorList_0=ruleDesignatorList
		{
			$current = $this_DesignatorList_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getDesignationAccess().getEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRuleDesignatorList
entryRuleDesignatorList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDesignatorListRule()); }
	iv_ruleDesignatorList=ruleDesignatorList
	{ $current=$iv_ruleDesignatorList.current; }
	EOF;

// Rule DesignatorList
ruleDesignatorList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDesignatorListAccess().getDesignatorListDesignatorParserRuleCall_0());
			}
			lv_DesignatorList_0_0=ruleDesignator
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDesignatorListRule());
				}
				add(
					$current,
					"DesignatorList",
					lv_DesignatorList_0_0,
					"org.xtext.project.stdc.Stdc.Designator");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDesignator
entryRuleDesignator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDesignatorRule()); }
	iv_ruleDesignator=ruleDesignator
	{ $current=$iv_ruleDesignator.current; }
	EOF;

// Rule Designator
ruleDesignator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getDesignatorAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDesignatorAccess().getConstExpConstantExpressionParserRuleCall_0_1_0());
					}
					lv_constExp_1_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDesignatorRule());
						}
						set(
							$current,
							"constExp",
							lv_constExp_1_0,
							"org.xtext.project.stdc.Stdc.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=']'
			{
				newLeafNode(otherlv_2, grammarAccess.getDesignatorAccess().getRightSquareBracketKeyword_0_2());
			}
		)
		    |
		(
			(
				('.')=>
				otherlv_3='.'
				{
					newLeafNode(otherlv_3, grammarAccess.getDesignatorAccess().getFullStopKeyword_1_0());
				}
			)
			(
				(
					lv__ID_4_0=RULE_ID
					{
						newLeafNode(lv__ID_4_0, grammarAccess.getDesignatorAccess().get_IDIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDesignatorRule());
						}
						setWithLastConsumed(
							$current,
							"_ID",
							lv__ID_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStaticAssertDeclaration
entryRuleStaticAssertDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStaticAssertDeclarationRule()); }
	iv_ruleStaticAssertDeclaration=ruleStaticAssertDeclaration
	{ $current=$iv_ruleStaticAssertDeclaration.current; }
	EOF;

// Rule StaticAssertDeclaration
ruleStaticAssertDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='_Static_assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getStaticAssertDeclarationAccess().get_Static_assertKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getStaticAssertDeclarationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStaticAssertDeclarationAccess().getConstExpConstantExpressionParserRuleCall_2_0());
				}
				lv_constExp_2_0=ruleConstantExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStaticAssertDeclarationRule());
					}
					set(
						$current,
						"constExp",
						lv_constExp_2_0,
						"org.xtext.project.stdc.Stdc.ConstantExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getStaticAssertDeclarationAccess().getCommaKeyword_3());
		}
		(
			(
				lv_literal_4_0=RULE_STRINGC
				{
					newLeafNode(lv_literal_4_0, grammarAccess.getStaticAssertDeclarationAccess().getLiteralSTRINGCTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStaticAssertDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"literal",
						lv_literal_4_0,
						"org.xtext.project.stdc.Stdc.STRINGC");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getStaticAssertDeclarationAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getStaticAssertDeclarationAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLabeledStatementParserRuleCall_0());
		}
		this_LabeledStatement_0=ruleLabeledStatement
		{
			$current = $this_LabeledStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_1());
		}
		this_CompoundStatement_1=ruleCompoundStatement
		{
			$current = $this_CompoundStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_2());
		}
		this_ExpressionStatement_2=ruleExpressionStatement
		{
			$current = $this_ExpressionStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_3());
		}
		this_SelectionStatement_3=ruleSelectionStatement
		{
			$current = $this_SelectionStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIterationStatementParserRuleCall_4());
		}
		this_IterationStatement_4=ruleIterationStatement
		{
			$current = $this_IterationStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getJumpStatementParserRuleCall_5());
		}
		this_JumpStatement_5=ruleJumpStatement
		{
			$current = $this_JumpStatement_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLabeledStatement
entryRuleLabeledStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabeledStatementRule()); }
	iv_ruleLabeledStatement=ruleLabeledStatement
	{ $current=$iv_ruleLabeledStatement.current; }
	EOF;

// Rule LabeledStatement
ruleLabeledStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				newLeafNode(this_ID_0, grammarAccess.getLabeledStatementAccess().getIDTerminalRuleCall_0_0());
			}
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getLabeledStatementAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLabeledStatementAccess().getRightStatementParserRuleCall_0_2_0());
					}
					lv_right_2_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabeledStatementRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"org.xtext.project.stdc.Stdc.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='case'
			{
				newLeafNode(otherlv_3, grammarAccess.getLabeledStatementAccess().getCaseKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLabeledStatementAccess().getExpConstantExpressionParserRuleCall_1_1_0());
					}
					lv_exp_4_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabeledStatementRule());
						}
						set(
							$current,
							"exp",
							lv_exp_4_0,
							"org.xtext.project.stdc.Stdc.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getLabeledStatementAccess().getColonKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLabeledStatementAccess().getRightStatementParserRuleCall_1_3_0());
					}
					lv_right_6_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabeledStatementRule());
						}
						set(
							$current,
							"right",
							lv_right_6_0,
							"org.xtext.project.stdc.Stdc.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_7='default'
			{
				newLeafNode(otherlv_7, grammarAccess.getLabeledStatementAccess().getDefaultKeyword_2_0());
			}
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getLabeledStatementAccess().getColonKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLabeledStatementAccess().getRightStatementParserRuleCall_2_2_0());
					}
					lv_right_9_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabeledStatementRule());
						}
						set(
							$current,
							"right",
							lv_right_9_0,
							"org.xtext.project.stdc.Stdc.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundStatementRule()); }
	iv_ruleCompoundStatement=ruleCompoundStatement
	{ $current=$iv_ruleCompoundStatement.current; }
	EOF;

// Rule CompoundStatement
ruleCompoundStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundStatementAccess().getBlockListBlockItemParserRuleCall_2_0());
				}
				lv_blockList_2_0=ruleBlockItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundStatementRule());
					}
					add(
						$current,
						"blockList",
						lv_blockList_2_0,
						"org.xtext.project.stdc.Stdc.BlockItem");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleBlockItem
entryRuleBlockItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockItemRule()); }
	iv_ruleBlockItem=ruleBlockItem
	{ $current=$iv_ruleBlockItem.current; }
	EOF;

// Rule BlockItem
ruleBlockItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlockItemAccess().getDeclarationParserRuleCall_0());
		}
		this_Declaration_0=ruleDeclaration
		{
			$current = $this_Declaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockItemAccess().getStatementParserRuleCall_1());
		}
		this_Statement_1=ruleStatement
		{
			$current = $this_Statement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	iv_ruleExpressionStatement=ruleExpressionStatement
	{ $current=$iv_ruleExpressionStatement.current; }
	EOF;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExpressionStatementAccess().getExpressionStatementAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpExpressionCParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpressionC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"org.xtext.project.stdc.Stdc.ExpressionC");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectionStatementRule()); }
	iv_ruleSelectionStatement=ruleSelectionStatement
	{ $current=$iv_ruleSelectionStatement.current; }
	EOF;

// Rule SelectionStatement
ruleSelectionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelectionStatementAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectionStatementAccess().getSwitchStatementParserRuleCall_1());
		}
		this_SwitchStatement_1=ruleSwitchStatement
		{
			$current = $this_SwitchStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIterationStatement
entryRuleIterationStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIterationStatementRule()); }
	iv_ruleIterationStatement=ruleIterationStatement
	{ $current=$iv_ruleIterationStatement.current; }
	EOF;

// Rule IterationStatement
ruleIterationStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileLoopParserRuleCall_0());
		}
		this_WhileLoop_0=ruleWhileLoop
		{
			$current = $this_WhileLoop_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoWhileLoopParserRuleCall_1());
		}
		this_DoWhileLoop_1=ruleDoWhileLoop
		{
			$current = $this_DoWhileLoop_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIterationStatementAccess().getForLoopParserRuleCall_2());
		}
		this_ForLoop_2=ruleForLoop
		{
			$current = $this_ForLoop_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfStatementAccess().getIfStatementAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getCondExpressionCParserRuleCall_3_0());
				}
				lv_cond_3_0=ruleExpressionC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"cond",
						lv_cond_3_0,
						"org.xtext.project.stdc.Stdc.ExpressionC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getThenStatementParserRuleCall_5_0());
				}
				lv_then_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"then",
						lv_then_5_0,
						"org.xtext.project.stdc.Stdc.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_6='else'
				{
					newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementParserRuleCall_6_1_0());
					}
					lv_else_7_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"else",
							lv_else_7_0,
							"org.xtext.project.stdc.Stdc.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	iv_ruleSwitchStatement=ruleSwitchStatement
	{ $current=$iv_ruleSwitchStatement.current; }
	EOF;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSwitchStatementAccess().getSwitchStatementAction_0(),
					$current);
			}
		)
		otherlv_1='switch'
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitchExpExpressionCParserRuleCall_3_0());
				}
				lv_switchExp_3_0=ruleExpressionC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
					}
					set(
						$current,
						"switchExp",
						lv_switchExp_3_0,
						"org.xtext.project.stdc.Stdc.ExpressionC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatementAccess().getStmtStatementParserRuleCall_5_0());
				}
				lv_stmt_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_5_0,
						"org.xtext.project.stdc.Stdc.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	iv_ruleForLoop=ruleForLoop
	{ $current=$iv_ruleForLoop.current; }
	EOF;

// Rule ForLoop
ruleForLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForLoopAccess().getForLoopAction_0(),
					$current);
			}
		)
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getForKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getForLoopAccess().getExp1ExpressionStatementParserRuleCall_3_0_0());
					}
					lv_exp1_3_0=ruleExpressionStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForLoopRule());
						}
						set(
							$current,
							"exp1",
							lv_exp1_3_0,
							"org.xtext.project.stdc.Stdc.ExpressionStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getForLoopAccess().getDeclarationDeclarationParserRuleCall_3_1_0());
					}
					lv_declaration_4_0=ruleDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForLoopRule());
						}
						set(
							$current,
							"declaration",
							lv_declaration_4_0,
							"org.xtext.project.stdc.Stdc.Declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getExp2ExpressionStatementParserRuleCall_4_0());
				}
				lv_exp2_5_0=ruleExpressionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"exp2",
						lv_exp2_5_0,
						"org.xtext.project.stdc.Stdc.ExpressionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getExp3ExpressionCParserRuleCall_5_0());
				}
				lv_exp3_6_0=ruleExpressionC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"exp3",
						lv_exp3_6_0,
						"org.xtext.project.stdc.Stdc.ExpressionC");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getBodyStatementParserRuleCall_7_0());
				}
				lv_body_8_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.xtext.project.stdc.Stdc.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	iv_ruleWhileLoop=ruleWhileLoop
	{ $current=$iv_ruleWhileLoop.current; }
	EOF;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileLoopAccess().getWhileLoopAction_0(),
					$current);
			}
		)
		otherlv_1='while'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getWhileKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getCondExpressionCParserRuleCall_3_0());
				}
				lv_cond_3_0=ruleExpressionC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"cond",
						lv_cond_3_0,
						"org.xtext.project.stdc.Stdc.ExpressionC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getBodyStatementParserRuleCall_5_0());
				}
				lv_body_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"body",
						lv_body_5_0,
						"org.xtext.project.stdc.Stdc.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoWhileLoopRule()); }
	iv_ruleDoWhileLoop=ruleDoWhileLoop
	{ $current=$iv_ruleDoWhileLoop.current; }
	EOF;

// Rule DoWhileLoop
ruleDoWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDoWhileLoopAccess().getDoWhileLoopAction_0(),
					$current);
			}
		)
		otherlv_1='do'
		{
			newLeafNode(otherlv_1, grammarAccess.getDoWhileLoopAccess().getDoKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileLoopAccess().getBodyStatementParserRuleCall_2_0());
				}
				lv_body_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.xtext.project.stdc.Stdc.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='while'
		{
			newLeafNode(otherlv_3, grammarAccess.getDoWhileLoopAccess().getWhileKeyword_3());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileLoopAccess().getCondExpressionCParserRuleCall_5_0());
				}
				lv_cond_5_0=ruleExpressionC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
					}
					set(
						$current,
						"cond",
						lv_cond_5_0,
						"org.xtext.project.stdc.Stdc.ExpressionC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getDoWhileLoopAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getDoWhileLoopAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleJumpStatement
entryRuleJumpStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJumpStatementRule()); }
	iv_ruleJumpStatement=ruleJumpStatement
	{ $current=$iv_ruleJumpStatement.current; }
	EOF;

// Rule JumpStatement
ruleJumpStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJumpStatementAccess().getJumpStatementAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='goto'
				{
					newLeafNode(otherlv_1, grammarAccess.getJumpStatementAccess().getGotoKeyword_1_0_0());
				}
				this_ID_2=RULE_ID
				{
					newLeafNode(this_ID_2, grammarAccess.getJumpStatementAccess().getIDTerminalRuleCall_1_0_1());
				}
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getJumpStatementAccess().getSemicolonKeyword_1_0_2());
				}
			)
			    |
			(
				otherlv_4='continue'
				{
					newLeafNode(otherlv_4, grammarAccess.getJumpStatementAccess().getContinueKeyword_1_1_0());
				}
				otherlv_5=';'
				{
					newLeafNode(otherlv_5, grammarAccess.getJumpStatementAccess().getSemicolonKeyword_1_1_1());
				}
			)
			    |
			(
				otherlv_6='break'
				{
					newLeafNode(otherlv_6, grammarAccess.getJumpStatementAccess().getBreakKeyword_1_2_0());
				}
				otherlv_7=';'
				{
					newLeafNode(otherlv_7, grammarAccess.getJumpStatementAccess().getSemicolonKeyword_1_2_1());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getJumpStatementAccess().getRetCReturnParserRuleCall_1_3_0());
					}
					lv_ret_8_0=ruleCReturn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJumpStatementRule());
						}
						set(
							$current,
							"ret",
							lv_ret_8_0,
							"org.xtext.project.stdc.Stdc.CReturn");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCReturn
entryRuleCReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCReturnRule()); }
	iv_ruleCReturn=ruleCReturn
	{ $current=$iv_ruleCReturn.current; }
	EOF;

// Rule CReturn
ruleCReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCReturnAccess().getCReturnAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getCReturnAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCReturnAccess().getExpRExpressionCParserRuleCall_2_0());
				}
				lv_expR_2_0=ruleExpressionC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCReturnRule());
					}
					set(
						$current,
						"expR",
						lv_expR_2_0,
						"org.xtext.project.stdc.Stdc.ExpressionC");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getCReturnAccess().getSemicolonKeyword_3());
		}
	)
;

fragment RULE_IS : (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?);

fragment RULE_HP : '0' ('x'|'X');

fragment RULE_NZ : '1'..'9';

fragment RULE_H : ('a'..'f'|'A'..'F'|'0'..'9');

fragment RULE_E : ('E'|'e') ('+'|'-')? RULE_INT;

fragment RULE_P : ('P'|'p') ('+'|'-')? RULE_INT;

fragment RULE_FS : ('f'|'F'|'l'|'L');

RULE_I_CONSTANT : (RULE_HP ('a'..'f'|'A'..'F'|'0'..'9')+ RULE_IS?|RULE_NZ RULE_INT? RULE_IS?|'0' RULE_INT? RULE_IS?|('u'|'U'|'L')? '\'' ('^'|'\''|'\\'|'\n')+ '\'');

RULE_F_CONSTANT : (RULE_HP RULE_H+ RULE_IS?|RULE_INT? '.' RULE_INT RULE_E? RULE_FS?|RULE_INT '.' RULE_E? RULE_FS?|RULE_HP RULE_H+ RULE_P RULE_FS?|RULE_HP RULE_H* '.' RULE_H+ RULE_P RULE_FS?|RULE_HP RULE_H+ '.' RULE_P RULE_FS?);

RULE_CHAR : '\'' ~(('\\'|'\'')) '\'';

RULE_STRINGC : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
