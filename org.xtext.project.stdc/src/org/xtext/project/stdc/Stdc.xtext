grammar org.xtext.project.stdc.Stdc with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)

generate stdc "http://www.xtext.org/project/stdc/Stdc"

Model:
	greetings=TranslationUnit;

TranslationUnit
	: exDeclaration+=ExternalDeclaration*
	;

ExternalDeclaration
	: 
	(=>FunctionDefinition
	| Declaration )
	;

FunctionDefinition
	: declarationSpec+=DeclarationSpecifier+ decla=Declarator
		 declaList+=Declaration* body=CompoundStatement
	;

DeclarationList
	: decl+=Declaration+
	;

ConstantExpression
	: ConditionalExpression	/* with constraints */
	;
	
ExpressionC returns ExpressionC
	: AssignmentExpression (=>({Exp.left=current} ',') right=AssignmentExpression)*
	;
	
AssignmentExpression returns ExpressionC
	:	ConditionalExpression  ({AssignmentExpression.left=current} OpAssign right=ConditionalExpression)?
	;

OpAssign:
	  '='  | '+=' | '-=' | '*=' | '/=' | '%='
	| '&=' | '|=' | '<' '<' '=' | '>' '>=';


ConditionalExpression returns ExpressionC
	:  LogicalOrExpression
	  	({ConditionalExpression.first=current} =>('?' second=ExpressionC) ':' third=ConditionalExpression)?
	;

LogicalOrExpression returns ExpressionC
	: LogicalAndExpression (=>({LogicOr.left=current} OpOr) right=LogicalAndExpression)*
	;

OpOr:
	'||'
;

LogicalAndExpression returns ExpressionC
	: InclusiveOrExpression (=>({LogicalExp.left=current} OpAnd) right=InclusiveOrExpression)*
	;

OpAnd:
	'&&'
;

InclusiveOrExpression returns ExpressionC
	: ExclusiveOrExpression (=>({InclusiveOr.left=current} '|') right=ExclusiveOrExpression)*
	;

ExclusiveOrExpression returns ExpressionC
	: AndExpression (=>({ExclusiveOr.left=current} '^') right=AndExpression)*
	;

AndExpression returns ExpressionC
	: EqualityExpression (=>({AndExp.left=current} '&') right=EqualityExpression)*
	;

EqualityExpression returns ExpressionC
	: RelationalExpression (=>({EqualExp.left=current} OpEqual) right=RelationalExpression)*
	;

OpEqual:
	'==' | '!=' 
;

RelationalExpression returns ExpressionC
	: ShiftExpression (=>({RelExp.left=current} OpRel) right=ShiftExpression)*
	;

OpRel:
	'<=' | '>=' | '<' | '>'
;

ShiftExpression returns ExpressionC
	: AdditiveExpression (=>({ShiftExp.left=current} OpShift) right=AdditiveExpression)*
	;
	
OpShift:
	'<<' | '>>'
;

AdditiveExpression returns ExpressionC
	: MultiplicativeExpression (=>({AddExp.left=current} OpAdd) right=MultiplicativeExpression)*
	;
	
OpAdd:
	'+' | '-'
;

MultiplicativeExpression returns ExpressionC
	: UnaryExpression (=>({MultExp.left=current} OpMult) right=UnaryExpression)*
	;

OpMult:
	'*' | '/' | '%'
;

UnaryExpression returns ExpressionC
	: postExp=PostfixExpression
	| (c=CastRule
		|'sizeof'
		|OpUnary
		|OpInc
		|'_Alignof'
	) unExp=UnaryExpression
	;

CastRule:
	'(' type=Types ')'
;

OpInc:
	"++" | "--"
;

OpUnary:
	'&' | '*' | '+' | '-' | '~' | '!'
;

PostfixExpression returns ExpressionC
	: {PostfixExpression} 
	(  primaryExp=PrimaryExpression
	| postType=PostfixType
	) postfix2+=PostfixExpression2*
	;

PostfixExpression2 returns PostfixExpression
	: 
	( {ArrayCall} '[' exppost=ExpressionC ']'
	| {FunctionCall} '(' argumentExpList=ArgumentExpressionList? ')'
	| {DotID} '.' name=ID
	| {PointerCall} OpPtr name=ID
	| {IncDec} op=OpInc
	)			
	;

OpPtr:
	'->'
;

PostfixType:
	CastRule '{' init=InitializerList ','? '}'
;

PrimaryExpression returns ExpressionC
	: {CharConst} ch=CHAR
	| {StrConst} str=STRINGC
	| Constant
	| {Identifier} name=ID
	| '(' ExpressionC ')'
	| GenericSelection
;	

ArgumentExpressionList
	: AssignmentExpression (=>({ArgumentExp.left=current} ',') right=AssignmentExpression)*
	;

Constant
	: {IntConst} intC=I_CONSTANT		/* includes character_constant */
	| {FloatConst} floatC=F_CONSTANT
	;

EnumerationConstant		/* before it has been defined as such */
	: _ID=ID
	;

GenericSelection
	: '_Generic' '(' exp=AssignmentExpression ',' genericAssocList=GenericAssocList ')'
	;

GenericAssocList
	: GenericAssociation (=>({GenericAssoc.left=current} ',') right=GenericAssociation)*
	;

GenericAssociation
	: type=TypeName ':' assExp=AssignmentExpression
	| 'default' ':' exp=AssignmentExpression
	;


pre_declaration:
	declarationSpec+=DeclarationSpecifier+
;

Declaration
	: {DeclarationInitDeclaratorList} declarationSpec+=DeclarationSpecifier+ declaratorList=InitDeclaratorList? ';'
	| StaticAssertDeclaration
	;

DeclarationSpecifier
	: storeClass=StorageClassSpecifier
	| TypeSpecifier
	| funcSpec=FunctionSpecifier
	| AlignmentSpecifier
	;

InitDeclaratorList
	: iniDec=InitDeclarator (=>({InitDeclaList.left=current}',') right=InitDeclarator)*
	;

InitDeclarator
	: dec=Declarator ('=' init=Initializer)?
	;

StorageClassSpecifier
	: 'typedef'	/* identifiers must be flagged as TYPEDEF_NAME */
	| 'extern'
	| 'static'
	| '_Thread_local'
	| 'auto'
	| 'register'
	;

TypeSpecifier
	: {TypeSpecifier}
	( type=Types
	| atomicType=AtomicTypeSpecifier
	| structSpec=StructOrUnionSpecifier
	|  enumSpec=EnumSpecifier
	)
	;
Types:
	'void'
	| 'char'
	| 'short'
	| 'int'
	| 'long'
	| 'float'
	| 'double'
	| 'signed'
	| 'unsigned'
	| 'bool'
	| 'complex'
	| 'imaginary'	  	/* non-mandated extension */
;

StructOrUnionSpecifier
	: {StructList} StructOrUnion 
	( '{' structList=StructDeclarationList '}'
	| ID ('{' structList=StructDeclarationList '}')?
	)
	;

StructOrUnion
	: 'struct'
	| 'union'
	;

StructDeclarationList
	: structDeclaration+=StructDeclaration+
	;

StructDeclaration
	: {SpecifierStuctList} specifierList=SpecifierQualifierList structList=StructDeclaratorList? ';'
	| StaticAssertDeclaration
	;

SpecifierQualifierList
	: {TypeSpecifierList} (=>type+=TypeSpecifier | typeQual+=TypeQualifier)+
	;


StructDeclaratorList
	: StructDeclarator (=>({StructList.left=current} ',') right=StructDeclarator)*
	;
	
StructDeclarator
	: {StructConstantExp} ':' constantExp=ConstantExpression
	| {DeclaratorConstantExp} decl=Declarator (':' constantExp=ConstantExpression)?
	;

EnumSpecifier
	: {EnumSpecific} 'enum' 
	( '{' enumList=EnumeratorList ','? '}'
	| ID ('{' enumList=EnumeratorList ','? '}')?
	)
	;

EnumeratorList
	: Enumerator (=>({EnumList.left=current} ',') right=Enumerator)*
	;

Enumerator	/* identifiers must be flagged as ENUMERATION_CONSTANT */
	: {EnumAtt} enumConst=EnumerationConstant ('=' exp=ConstantExpression)?
	;

AtomicTypeSpecifier
	: '_Atomic' CastRule
	;

TypeQualifier
	: 'const'
	| 'restrict'
	| 'volatile'
	| '_Atomic'
	;

FunctionSpecifier
	: 'inline'
	| '_Noreturn'
	;

AlignmentSpecifier
	: {Alignment} Alignas '(' (type=TypeName|exp=ConstantExpression) ')'
	;

Alignas:
	'_Alignas'
;

Declarator
	: point=Pointer? directDecl=DirectDeclarator
	;

DirectDeclarator
	: {DirectDeclarator}
	(  name=ID 	| '(' dc=Declarator? ')') declarator2+=DirectDeclarator2*
	;

DirectDeclarator2 returns DirectDeclarator
	:
	({D2} '[' '*'? ']'
	|{D3} '[' 'static' typeQualList=TypeQualifierList exp=AssignmentExpression ']'
	|{D4} '[' 'static' exp=AssignmentExpression ']'
	|{D5} '[' typeQualList=TypeQualifierList '*' ']'
	|{D6} '[' typeQualList=TypeQualifierList 'static' exp=AssignmentExpression ']'
	|{D7} '[' typeQualList=TypeQualifierList exp=AssignmentExpression ']'
	|{D8} '[' typeQualList=TypeQualifierList ']'
	|{D9}'[' exp=AssignmentExpression ']'
	|{FunctionParametersDecl} '(' (idList=IdentifierList|paramList=ParameterTypeList)? ')'
	)
	;

Pointer
	: {PointerRule} '*' =>(typeQualList+=TypeQualifier | '*')* 
	;

TypeQualifierList
	: typeQualList += TypeQualifier+
	;

ParameterTypeList
	: ParameterList (',' '...')?
	;

ParameterList
	: ParameterDeclaration (=>({ParameterDeclarationList.left=current} ',') right=ParameterDeclaration)*
	;

ParameterDeclaration
	: {DeclarationAbstract} declarationSpec+=DeclarationSpecifier+ (abstract=AbstractDeclarator|=>declarator=Declarator)?
	;

IdentifierList
	: ID (',' ID)*
	;

TypeName
	: {TypeNameRule} specifierQualList=SpecifierQualifierList =>absDeclarator=AbstractDeclarator?

	;

AbstractDeclarator returns DirectAbstractDeclarator
	: {AbstractDeclaratorPointer} point=Pointer abstractDeclarator=DirectAbstractDeclarator?
	| abstractDeclarator=DirectAbstractDeclarator
	;

DirectAbstractDeclarator returns DirectAbstractDeclarator
	: '(' AbstractDeclarator ')' direct_declarator2+=DirectAbstractDeclarator2*
	;

DirectAbstractDeclarator2
	: {direct_declarator2}
	(  '[' '*'? ']'
	| '[' 'static' typeQualList=TypeQualifierList exp=AssignmentExpression ']'
	| '[' 'static' exp=AssignmentExpression ']'
	| '[' typeQualList=TypeQualifierList 'static' exp=AssignmentExpression ']'
	| '[' typeQualList=TypeQualifierList exp=AssignmentExpression ']'
	| '[' typeQualList=TypeQualifierList ']'
	| '[' exp=AssignmentExpression ']'
	| '(' paramList=ParameterTypeList? ')'
	)
	
	;

Initializer
	: {init_list} '{' init=InitializerList ','? '}'
	 | exp=AssignmentExpression
	;

InitializerList
	: InitializerList2 (=>({InitLis.left=current} ',') right=InitializerList2)*
	;
	
InitializerList2 returns InitializerList
	: Desig=Designation? Init=Initializer
	;

Designation
	: DesignatorList '='
	;

DesignatorList
	:  DesignatorList += Designator
	;

Designator
	: '[' constExp=ConstantExpression ']'
	| =>'.' _ID=ID
	;

StaticAssertDeclaration
	: '_Static_assert' '(' constExp=ConstantExpression ',' literal=STRINGC ')' ';'
	;

Statement returns Statement
	: LabeledStatement
	| CompoundStatement
	| ExpressionStatement
	| SelectionStatement
	| IterationStatement
	| JumpStatement
	;

LabeledStatement returns Statement
	: ID ':' right=Statement
	| 'case' exp=ConstantExpression ':' right=Statement
	| 'default' ':' right=Statement
	;

CompoundStatement
	: {CompoundStatement} '{'  blockList+=BlockItem* '}'
	;
	
BlockItemList
	:  BlockItemt+=BlockItem+
	;
	
BlockItem
	: Declaration
	| Statement
	;

ExpressionStatement
	: {ExpressionStatement} exp=ExpressionC? ';'
	;

SelectionStatement returns Statement
	: IfStatement
	| SwitchStatement
	;

IterationStatement returns Statement
	: WhileLoop
	| DoWhileLoop
	| ForLoop
	;

IfStatement returns Statement:
		{IfStatement}
		'if' '(' cond=ExpressionC ')'
		then=Statement
		(=>'else' else=Statement)?	
	;

SwitchStatement returns Statement:
	{SwitchStatement}
	'switch' '(' switchExp=ExpressionC ')'
	stmt=Statement
;

ForLoop returns Statement:
	{ForLoop}
	'for' '(' (exp1=ExpressionStatement|declaration=Declaration)  exp2=ExpressionStatement (exp3=ExpressionC)? ')'
	body=Statement
;

WhileLoop returns Statement:
	{WhileLoop}
	'while' '(' cond=ExpressionC ')'
	body=Statement
;

DoWhileLoop returns Statement:
	{DoWhileLoop}
	'do' body=Statement
	'while' '(' cond=ExpressionC ')' ';'
;

JumpStatement
	: {JumpStatement}
	( 'goto' ID ';'
	| 'continue' ';'
	| 'break' ';'
	| ret=CReturn
	)
	;

CReturn:
	{CReturn} 'return' expR=ExpressionC? ';'	
;
//////////////////////////////////
//////////  TERMINAIS  ///////////
//////////////////////////////////

//tipo da constante numerica
terminal fragment IS:
	  (('u'|'U')('l'|'L'|'ll'|'LL')?)
	| (('l'|'L'|'ll'|'LL')('u'|'U')?)
;

//pedrao de hexadecimal
terminal fragment HP:
	('0'('x'|'X'))
;

//non-zero digito decimal
terminal fragment NZ:
	('1'..'9')
;

//digito hexadecimal
terminal fragment H:
	('a'..'f' | 'A'..'F' | '0'..'9')
;

//elevado para decimal
terminal fragment E:
	(('E'|'e')('+'|'-')? INT)
;

//elevado para hexadecimal
terminal fragment P:
	(('P'|'p')('+'|'-')? INT)
;

//tipo float ou long
terminal fragment FS:
	('f'|'F'|'l'|'L')
;

terminal I_CONSTANT
	: HP('a'..'f' | 'A'..'F' | '0'..'9')+IS?
	| NZ INT? IS?
	| '0' INT? IS?
	| ('u'|'U'|'L')?"'"('^'|"'"|'\\'|'\n')/*{ES}*/+"'"
	;

terminal F_CONSTANT
	: HP H+ IS?
	| INT?'.'INT E? FS?
	| INT '.' E? FS?
	| HP H+ P FS?
	| HP H* '.' H+ P FS?
	| HP H+ '.' P FS?
	;
	
terminal CHAR: 
	"'" (!('\\'|"'") ) "'"
;

terminal STRINGC	:
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
;